name: Build and Push Worker Image

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/worker/**'
      - 'src/shared/**'
      - 'docker/Dockerfile.worker'
      - 'requirements.txt'
      - '.github/workflows/build-worker.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/worker/**'
      - 'src/shared/**'
      - 'docker/Dockerfile.worker'
      - 'requirements.txt'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-worker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug - Check directory structure
      run: |
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "Docker directory contents:"
        ls -la docker/
        echo "Dockerfile.worker exists:"
        ls -la docker/Dockerfile.worker

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: warmlyale/puzzle-solver-worker
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.worker
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Worker image
      run: |
        echo "Testing worker image..."
        docker run --rm warmlyale/puzzle-solver-worker:latest python3 -c "
        import sys
        sys.path.append('/app')
        from worker.binary_manager import verify_rckang_available
        print('‚úÖ Worker image built successfully')
        print('‚úÖ Python modules importable')
        try:
            available = verify_rckang_available()
            print(f'‚úÖ RCKangaroo availability check: {available}')
        except Exception as e:
            print(f'‚ö†Ô∏è RCKangaroo check failed (expected without GPU): {e}')
        print('üéâ Worker image ready for GPU deployment!')
        "

    - name: Update README with latest image info
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "Worker image built and pushed: warmlyale/puzzle-solver-worker:latest"
        echo "Build completed at: $(date)"
        echo "Commit: ${{ github.sha }}"
